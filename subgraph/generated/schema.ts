// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DomainTLD extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tld", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("expires", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DomainTLD entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DomainTLD entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DomainTLD", id.toString(), this);
    }
  }

  static load(id: string): DomainTLD | null {
    return changetype<DomainTLD | null>(store.get("DomainTLD", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tld(): string {
    let value = this.get("tld");
    return value!.toString();
  }

  set tld(value: string) {
    this.set("tld", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get expires(): BigInt {
    let value = this.get("expires");
    return value!.toBigInt();
  }

  set expires(value: BigInt) {
    this.set("expires", Value.fromBigInt(value));
  }
}

export class DomainName extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DomainName entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DomainName entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DomainName", id.toString(), this);
    }
  }

  static load(id: string): DomainName | null {
    return changetype<DomainName | null>(store.get("DomainName", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get eth(): string | null {
    let value = this.get("eth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eth(value: string | null) {
    if (!value) {
      this.unset("eth");
    } else {
      this.set("eth", Value.fromString(<string>value));
    }
  }

  get crypto(): string | null {
    let value = this.get("crypto");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set crypto(value: string | null) {
    if (!value) {
      this.unset("crypto");
    } else {
      this.set("crypto", Value.fromString(<string>value));
    }
  }

  get zil(): string | null {
    let value = this.get("zil");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set zil(value: string | null) {
    if (!value) {
      this.unset("zil");
    } else {
      this.set("zil", Value.fromString(<string>value));
    }
  }

  get coin(): string | null {
    let value = this.get("coin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set coin(value: string | null) {
    if (!value) {
      this.unset("coin");
    } else {
      this.set("coin", Value.fromString(<string>value));
    }
  }

  get wallet(): string | null {
    let value = this.get("wallet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set wallet(value: string | null) {
    if (!value) {
      this.unset("wallet");
    } else {
      this.set("wallet", Value.fromString(<string>value));
    }
  }

  get bitcoin(): string | null {
    let value = this.get("bitcoin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bitcoin(value: string | null) {
    if (!value) {
      this.unset("bitcoin");
    } else {
      this.set("bitcoin", Value.fromString(<string>value));
    }
  }

  get x(): string | null {
    let value = this.get("x");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set x(value: string | null) {
    if (!value) {
      this.unset("x");
    } else {
      this.set("x", Value.fromString(<string>value));
    }
  }

  get _888(): string | null {
    let value = this.get("_888");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _888(value: string | null) {
    if (!value) {
      this.unset("_888");
    } else {
      this.set("_888", Value.fromString(<string>value));
    }
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }

  get dao(): string | null {
    let value = this.get("dao");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dao(value: string | null) {
    if (!value) {
      this.unset("dao");
    } else {
      this.set("dao", Value.fromString(<string>value));
    }
  }

  get blockchain(): string | null {
    let value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string | null) {
    if (!value) {
      this.unset("blockchain");
    } else {
      this.set("blockchain", Value.fromString(<string>value));
    }
  }
}

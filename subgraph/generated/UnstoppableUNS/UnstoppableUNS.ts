// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NewKey extends ethereum.Event {
  get params(): NewKey__Params {
    return new NewKey__Params(this);
  }
}

export class NewKey__Params {
  _event: NewKey;

  constructor(event: NewKey) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get keyIndex(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get key(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class NewURI extends ethereum.Event {
  get params(): NewURI__Params {
    return new NewURI__Params(this);
  }
}

export class NewURI__Params {
  _event: NewURI;

  constructor(event: NewURI) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class NewURIPrefix extends ethereum.Event {
  get params(): NewURIPrefix__Params {
    return new NewURIPrefix__Params(this);
  }
}

export class NewURIPrefix__Params {
  _event: NewURIPrefix;

  constructor(event: NewURIPrefix) {
    this._event = event;
  }

  get prefix(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class ResetRecords extends ethereum.Event {
  get params(): ResetRecords__Params {
    return new ResetRecords__Params(this);
  }
}

export class ResetRecords__Params {
  _event: ResetRecords;

  constructor(event: ResetRecords) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Set extends ethereum.Event {
  get params(): Set__Params {
    return new Set__Params(this);
  }
}

export class Set__Params {
  _event: Set;

  constructor(event: Set) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get keyIndex(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get valueIndex(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get key(): string {
    return this._event.parameters[3].value.toString();
  }

  get value(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnstoppableUNS__executeResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class UnstoppableUNS__executeInputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get gas(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get data(): Bytes {
    return this[4].toBytes();
  }
}

export class UnstoppableUNS__getByHashResult {
  value0: string;
  value1: string;

  constructor(value0: string, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }
}

export class UnstoppableUNS__getManyByHashResult {
  value0: Array<string>;
  value1: Array<string>;

  constructor(value0: Array<string>, value1: Array<string>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromStringArray(this.value0));
    map.set("value1", ethereum.Value.fromStringArray(this.value1));
    return map;
  }
}

export class UnstoppableUNS__verifyInputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get gas(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get data(): Bytes {
    return this[4].toBytes();
  }
}

export class UnstoppableUNS extends ethereum.SmartContract {
  static bind(address: Address): UnstoppableUNS {
    return new UnstoppableUNS("UnstoppableUNS", address);
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  childIdOf(tokenId: BigInt, label: string): BigInt {
    let result = super.call(
      "childIdOf",
      "childIdOf(uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(label)
      ]
    );

    return result[0].toBigInt();
  }

  try_childIdOf(tokenId: BigInt, label: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "childIdOf",
      "childIdOf(uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(label)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  execute(
    req: UnstoppableUNS__executeInputReqStruct,
    signature: Bytes
  ): UnstoppableUNS__executeResult {
    let result = super.call(
      "execute",
      "execute((address,uint256,uint256,uint256,bytes),bytes):(bool,bytes)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(signature)]
    );

    return new UnstoppableUNS__executeResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_execute(
    req: UnstoppableUNS__executeInputReqStruct,
    signature: Bytes
  ): ethereum.CallResult<UnstoppableUNS__executeResult> {
    let result = super.tryCall(
      "execute",
      "execute((address,uint256,uint256,uint256,bytes),bytes):(bool,bytes)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UnstoppableUNS__executeResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  exists(tokenId: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_exists(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  get(key: string, tokenId: BigInt): string {
    let result = super.call("get", "get(string,uint256):(string)", [
      ethereum.Value.fromString(key),
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_get(key: string, tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("get", "get(string,uint256):(string)", [
      ethereum.Value.fromString(key),
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getByHash(keyHash: BigInt, tokenId: BigInt): UnstoppableUNS__getByHashResult {
    let result = super.call(
      "getByHash",
      "getByHash(uint256,uint256):(string,string)",
      [
        ethereum.Value.fromUnsignedBigInt(keyHash),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return new UnstoppableUNS__getByHashResult(
      result[0].toString(),
      result[1].toString()
    );
  }

  try_getByHash(
    keyHash: BigInt,
    tokenId: BigInt
  ): ethereum.CallResult<UnstoppableUNS__getByHashResult> {
    let result = super.tryCall(
      "getByHash",
      "getByHash(uint256,uint256):(string,string)",
      [
        ethereum.Value.fromUnsignedBigInt(keyHash),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UnstoppableUNS__getByHashResult(
        value[0].toString(),
        value[1].toString()
      )
    );
  }

  getKey(keyHash: BigInt): string {
    let result = super.call("getKey", "getKey(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(keyHash)
    ]);

    return result[0].toString();
  }

  try_getKey(keyHash: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getKey", "getKey(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(keyHash)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getKeys(hashes: Array<BigInt>): Array<string> {
    let result = super.call("getKeys", "getKeys(uint256[]):(string[])", [
      ethereum.Value.fromUnsignedBigIntArray(hashes)
    ]);

    return result[0].toStringArray();
  }

  try_getKeys(hashes: Array<BigInt>): ethereum.CallResult<Array<string>> {
    let result = super.tryCall("getKeys", "getKeys(uint256[]):(string[])", [
      ethereum.Value.fromUnsignedBigIntArray(hashes)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getMany(keys: Array<string>, tokenId: BigInt): Array<string> {
    let result = super.call("getMany", "getMany(string[],uint256):(string[])", [
      ethereum.Value.fromStringArray(keys),
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toStringArray();
  }

  try_getMany(
    keys: Array<string>,
    tokenId: BigInt
  ): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getMany",
      "getMany(string[],uint256):(string[])",
      [
        ethereum.Value.fromStringArray(keys),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getManyByHash(
    keyHashes: Array<BigInt>,
    tokenId: BigInt
  ): UnstoppableUNS__getManyByHashResult {
    let result = super.call(
      "getManyByHash",
      "getManyByHash(uint256[],uint256):(string[],string[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(keyHashes),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return new UnstoppableUNS__getManyByHashResult(
      result[0].toStringArray(),
      result[1].toStringArray()
    );
  }

  try_getManyByHash(
    keyHashes: Array<BigInt>,
    tokenId: BigInt
  ): ethereum.CallResult<UnstoppableUNS__getManyByHashResult> {
    let result = super.tryCall(
      "getManyByHash",
      "getManyByHash(uint256[],uint256):(string[],string[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(keyHashes),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UnstoppableUNS__getManyByHashResult(
        value[0].toStringArray(),
        value[1].toStringArray()
      )
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedOrOwner(spender: Address, tokenId: BigInt): boolean {
    let result = super.call(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedOrOwner(
    spender: Address,
    tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonceOf(tokenId: BigInt): BigInt {
    let result = super.call("nonceOf", "nonceOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_nonceOf(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonceOf", "nonceOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  resolverOf(tokenId: BigInt): Address {
    let result = super.call("resolverOf", "resolverOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_resolverOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("resolverOf", "resolverOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  root(): BigInt {
    let result = super.call("root", "root():(uint256)", []);

    return result[0].toBigInt();
  }

  try_root(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("root", "root():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  verify(req: UnstoppableUNS__verifyInputReqStruct, signature: Bytes): boolean {
    let result = super.call(
      "verify",
      "verify((address,uint256,uint256,uint256,bytes),bytes):(bool)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(signature)]
    );

    return result[0].toBoolean();
  }

  try_verify(
    req: UnstoppableUNS__verifyInputReqStruct,
    signature: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verify",
      "verify((address,uint256,uint256,uint256,bytes),bytes):(bool)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddKeyCall extends ethereum.Call {
  get inputs(): AddKeyCall__Inputs {
    return new AddKeyCall__Inputs(this);
  }

  get outputs(): AddKeyCall__Outputs {
    return new AddKeyCall__Outputs(this);
  }
}

export class AddKeyCall__Inputs {
  _call: AddKeyCall;

  constructor(call: AddKeyCall) {
    this._call = call;
  }

  get key(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddKeyCall__Outputs {
  _call: AddKeyCall;

  constructor(call: AddKeyCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnForCall extends ethereum.Call {
  get inputs(): BurnForCall__Inputs {
    return new BurnForCall__Inputs(this);
  }

  get outputs(): BurnForCall__Outputs {
    return new BurnForCall__Outputs(this);
  }
}

export class BurnForCall__Inputs {
  _call: BurnForCall;

  constructor(call: BurnForCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class BurnForCall__Outputs {
  _call: BurnForCall;

  constructor(call: BurnForCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get req(): ExecuteCallReqStruct {
    return changetype<ExecuteCallReqStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get value1(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class ExecuteCallReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get gas(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get data(): Bytes {
    return this[4].toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get mintingManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintWithRecordsCall extends ethereum.Call {
  get inputs(): MintWithRecordsCall__Inputs {
    return new MintWithRecordsCall__Inputs(this);
  }

  get outputs(): MintWithRecordsCall__Outputs {
    return new MintWithRecordsCall__Outputs(this);
  }
}

export class MintWithRecordsCall__Inputs {
  _call: MintWithRecordsCall;

  constructor(call: MintWithRecordsCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[2].value.toString();
  }

  get keys(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[4].value.toStringArray();
  }
}

export class MintWithRecordsCall__Outputs {
  _call: MintWithRecordsCall;

  constructor(call: MintWithRecordsCall) {
    this._call = call;
  }
}

export class ReconfigureCall extends ethereum.Call {
  get inputs(): ReconfigureCall__Inputs {
    return new ReconfigureCall__Inputs(this);
  }

  get outputs(): ReconfigureCall__Outputs {
    return new ReconfigureCall__Outputs(this);
  }
}

export class ReconfigureCall__Inputs {
  _call: ReconfigureCall;

  constructor(call: ReconfigureCall) {
    this._call = call;
  }

  get keys(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReconfigureCall__Outputs {
  _call: ReconfigureCall;

  constructor(call: ReconfigureCall) {
    this._call = call;
  }
}

export class ReconfigureForCall extends ethereum.Call {
  get inputs(): ReconfigureForCall__Inputs {
    return new ReconfigureForCall__Inputs(this);
  }

  get outputs(): ReconfigureForCall__Outputs {
    return new ReconfigureForCall__Outputs(this);
  }
}

export class ReconfigureForCall__Inputs {
  _call: ReconfigureForCall;

  constructor(call: ReconfigureForCall) {
    this._call = call;
  }

  get keys(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ReconfigureForCall__Outputs {
  _call: ReconfigureForCall;

  constructor(call: ReconfigureForCall) {
    this._call = call;
  }
}

export class ResetCall extends ethereum.Call {
  get inputs(): ResetCall__Inputs {
    return new ResetCall__Inputs(this);
  }

  get outputs(): ResetCall__Outputs {
    return new ResetCall__Outputs(this);
  }
}

export class ResetCall__Inputs {
  _call: ResetCall;

  constructor(call: ResetCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResetCall__Outputs {
  _call: ResetCall;

  constructor(call: ResetCall) {
    this._call = call;
  }
}

export class ResetForCall extends ethereum.Call {
  get inputs(): ResetForCall__Inputs {
    return new ResetForCall__Inputs(this);
  }

  get outputs(): ResetForCall__Outputs {
    return new ResetForCall__Outputs(this);
  }
}

export class ResetForCall__Inputs {
  _call: ResetForCall;

  constructor(call: ResetForCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ResetForCall__Outputs {
  _call: ResetForCall;

  constructor(call: ResetForCall) {
    this._call = call;
  }
}

export class SafeMintCall extends ethereum.Call {
  get inputs(): SafeMintCall__Inputs {
    return new SafeMintCall__Inputs(this);
  }

  get outputs(): SafeMintCall__Outputs {
    return new SafeMintCall__Outputs(this);
  }
}

export class SafeMintCall__Inputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[2].value.toString();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeMintCall__Outputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }
}

export class SafeMint1Call extends ethereum.Call {
  get inputs(): SafeMint1Call__Inputs {
    return new SafeMint1Call__Inputs(this);
  }

  get outputs(): SafeMint1Call__Outputs {
    return new SafeMint1Call__Outputs(this);
  }
}

export class SafeMint1Call__Inputs {
  _call: SafeMint1Call;

  constructor(call: SafeMint1Call) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SafeMint1Call__Outputs {
  _call: SafeMint1Call;

  constructor(call: SafeMint1Call) {
    this._call = call;
  }
}

export class SafeMintWithRecordsCall extends ethereum.Call {
  get inputs(): SafeMintWithRecordsCall__Inputs {
    return new SafeMintWithRecordsCall__Inputs(this);
  }

  get outputs(): SafeMintWithRecordsCall__Outputs {
    return new SafeMintWithRecordsCall__Outputs(this);
  }
}

export class SafeMintWithRecordsCall__Inputs {
  _call: SafeMintWithRecordsCall;

  constructor(call: SafeMintWithRecordsCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[2].value.toString();
  }

  get keys(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[4].value.toStringArray();
  }
}

export class SafeMintWithRecordsCall__Outputs {
  _call: SafeMintWithRecordsCall;

  constructor(call: SafeMintWithRecordsCall) {
    this._call = call;
  }
}

export class SafeMintWithRecords1Call extends ethereum.Call {
  get inputs(): SafeMintWithRecords1Call__Inputs {
    return new SafeMintWithRecords1Call__Inputs(this);
  }

  get outputs(): SafeMintWithRecords1Call__Outputs {
    return new SafeMintWithRecords1Call__Outputs(this);
  }
}

export class SafeMintWithRecords1Call__Inputs {
  _call: SafeMintWithRecords1Call;

  constructor(call: SafeMintWithRecords1Call) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[2].value.toString();
  }

  get keys(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[4].value.toStringArray();
  }

  get data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SafeMintWithRecords1Call__Outputs {
  _call: SafeMintWithRecords1Call;

  constructor(call: SafeMintWithRecords1Call) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SafeTransferFromForCall extends ethereum.Call {
  get inputs(): SafeTransferFromForCall__Inputs {
    return new SafeTransferFromForCall__Inputs(this);
  }

  get outputs(): SafeTransferFromForCall__Outputs {
    return new SafeTransferFromForCall__Outputs(this);
  }
}

export class SafeTransferFromForCall__Inputs {
  _call: SafeTransferFromForCall;

  constructor(call: SafeTransferFromForCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get signature(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromForCall__Outputs {
  _call: SafeTransferFromForCall;

  constructor(call: SafeTransferFromForCall) {
    this._call = call;
  }
}

export class SafeTransferFromFor1Call extends ethereum.Call {
  get inputs(): SafeTransferFromFor1Call__Inputs {
    return new SafeTransferFromFor1Call__Inputs(this);
  }

  get outputs(): SafeTransferFromFor1Call__Outputs {
    return new SafeTransferFromFor1Call__Outputs(this);
  }
}

export class SafeTransferFromFor1Call__Inputs {
  _call: SafeTransferFromFor1Call;

  constructor(call: SafeTransferFromFor1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFromFor1Call__Outputs {
  _call: SafeTransferFromFor1Call;

  constructor(call: SafeTransferFromFor1Call) {
    this._call = call;
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get value(): string {
    return this._call.inputValues[1].value.toString();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetByHashCall extends ethereum.Call {
  get inputs(): SetByHashCall__Inputs {
    return new SetByHashCall__Inputs(this);
  }

  get outputs(): SetByHashCall__Outputs {
    return new SetByHashCall__Outputs(this);
  }
}

export class SetByHashCall__Inputs {
  _call: SetByHashCall;

  constructor(call: SetByHashCall) {
    this._call = call;
  }

  get keyHash(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value(): string {
    return this._call.inputValues[1].value.toString();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetByHashCall__Outputs {
  _call: SetByHashCall;

  constructor(call: SetByHashCall) {
    this._call = call;
  }
}

export class SetForCall extends ethereum.Call {
  get inputs(): SetForCall__Inputs {
    return new SetForCall__Inputs(this);
  }

  get outputs(): SetForCall__Outputs {
    return new SetForCall__Outputs(this);
  }
}

export class SetForCall__Inputs {
  _call: SetForCall;

  constructor(call: SetForCall) {
    this._call = call;
  }

  get key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get value(): string {
    return this._call.inputValues[1].value.toString();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SetForCall__Outputs {
  _call: SetForCall;

  constructor(call: SetForCall) {
    this._call = call;
  }
}

export class SetManyCall extends ethereum.Call {
  get inputs(): SetManyCall__Inputs {
    return new SetManyCall__Inputs(this);
  }

  get outputs(): SetManyCall__Outputs {
    return new SetManyCall__Outputs(this);
  }
}

export class SetManyCall__Inputs {
  _call: SetManyCall;

  constructor(call: SetManyCall) {
    this._call = call;
  }

  get keys(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetManyCall__Outputs {
  _call: SetManyCall;

  constructor(call: SetManyCall) {
    this._call = call;
  }
}

export class SetManyByHashCall extends ethereum.Call {
  get inputs(): SetManyByHashCall__Inputs {
    return new SetManyByHashCall__Inputs(this);
  }

  get outputs(): SetManyByHashCall__Outputs {
    return new SetManyByHashCall__Outputs(this);
  }
}

export class SetManyByHashCall__Inputs {
  _call: SetManyByHashCall;

  constructor(call: SetManyByHashCall) {
    this._call = call;
  }

  get keyHashes(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetManyByHashCall__Outputs {
  _call: SetManyByHashCall;

  constructor(call: SetManyByHashCall) {
    this._call = call;
  }
}

export class SetManyForCall extends ethereum.Call {
  get inputs(): SetManyForCall__Inputs {
    return new SetManyForCall__Inputs(this);
  }

  get outputs(): SetManyForCall__Outputs {
    return new SetManyForCall__Outputs(this);
  }
}

export class SetManyForCall__Inputs {
  _call: SetManyForCall;

  constructor(call: SetManyForCall) {
    this._call = call;
  }

  get keys(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SetManyForCall__Outputs {
  _call: SetManyForCall;

  constructor(call: SetManyForCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetTokenURIPrefixCall extends ethereum.Call {
  get inputs(): SetTokenURIPrefixCall__Inputs {
    return new SetTokenURIPrefixCall__Inputs(this);
  }

  get outputs(): SetTokenURIPrefixCall__Outputs {
    return new SetTokenURIPrefixCall__Outputs(this);
  }
}

export class SetTokenURIPrefixCall__Inputs {
  _call: SetTokenURIPrefixCall;

  constructor(call: SetTokenURIPrefixCall) {
    this._call = call;
  }

  get prefix(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetTokenURIPrefixCall__Outputs {
  _call: SetTokenURIPrefixCall;

  constructor(call: SetTokenURIPrefixCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferFromForCall extends ethereum.Call {
  get inputs(): TransferFromForCall__Inputs {
    return new TransferFromForCall__Inputs(this);
  }

  get outputs(): TransferFromForCall__Outputs {
    return new TransferFromForCall__Outputs(this);
  }
}

export class TransferFromForCall__Inputs {
  _call: TransferFromForCall;

  constructor(call: TransferFromForCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class TransferFromForCall__Outputs {
  _call: TransferFromForCall;

  constructor(call: TransferFromForCall) {
    this._call = call;
  }
}
